buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath('com.bmuschko:gradle-docker-plugin:2.6.1')
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'

    jar {
        baseName = project.getName().substring(project.getName().indexOf('/') + 1)
        version = '0.0.1-SNAPSHOT'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.7'
    }

    apply plugin: 'com.bmuschko.docker-remote-api'

    def jarName = jar.baseName << '-' << jar.version << '.jar'

//    docker {
//        url = 'https://192.168.99.100:2376'
//        certPath = new File(System.properties['user.home'], '.docker/machine/certs')
//
//        registryCredentials {
//            url = 'https://index.docker.io/v1'
//            username = 'backend'
//            password = 'backend'
//            email = 'backend@1yd.me'
//        }
//    }

    task copyJar(type: Copy) {
        from project.file('build/libs/' << jarName)
        into project.file('build/docker')
    }

    task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
        dependsOn build, copyJar

        destFile = project.file('build/docker/Dockerfile')

        from 'debian'
        maintainer 'Backend Team <backend@1yd.me>'
        runCommand 'groupadd -r athena && useradd -r -g athena athena'
        runCommand 'mkdir /athena && chown athena:athena /athena'
        workingDir '/athena'
        copyFile new String(jarName), new String('/athena/')
        //defaultCommand 'java', '-jar', new String('/' << jarName)
    }


//    task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
//        createDockerfile.shouldRunAfter build
//        copyJar.shouldRunAfter createDockerfile
//        dependsOn build, createDockerfile, copyJar
//
//        inputDir = createDockerfile.destFile.parentFile
//        tag = '1yd/' << jar.baseName
//    }
}
