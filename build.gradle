import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '1.2.7.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath('com.bmuschko:gradle-docker-plugin:2.6.1')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    jar {
        baseName = project.getName().substring(project.getName().indexOf('/') + 1)
        version = '0.0.1-SNAPSHOT'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.springframework.boot:spring-boot-starter-amqp')
        compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile('org.springframework.cloud:spring-cloud-starter-eureka')
        compile('org.springframework.cloud:spring-cloud-starter-ribbon')
        compile('org.springframework.cloud:spring-cloud-starter-security')
        compile('org.springframework.cloud:spring-cloud-starter')
        compile('org.springframework.cloud:spring-cloud-starter-zuul')
        compile('org.springframework.boot:spring-boot-starter-redis')
        compile('org.springframework.session:spring-session:1.0.2.RELEASE')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-jdbc')
        compile('org.springframework.boot:spring-boot-starter-hateoas')
        compile('org.springframework.boot:spring-boot-starter-web') {
            exclude module: 'spring-boot-starter-tomcat'
        }
        compile('org.springframework.boot:spring-boot-starter-websocket')
        compile('org.springframework.boot:spring-boot-starter-undertow')
        testCompile('org.springframework.boot:spring-boot-starter-test')

        compile('com.h2database:h2')
        runtime('mysql:mysql-connector-java')
        compile('org.projectlombok:lombok:1.16.6')
        compile('ma.glasnost.orika:orika-core:1.4.6')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Angel.SR3"
        }
    }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.7'
    }
}

configure(subprojects - project(':common/lib')) {
    dependencies {
        compile project(':common/lib')
    }

    apply plugin: 'spring-boot'
    apply plugin: 'com.bmuschko.docker-remote-api'

    def jarName = jar.baseName << '-' << jar.version << '.jar'

    docker {
        url = 'unix:///var/run/docker.sock'
//        url = 'https://192.168.99.100:2376'
//        certPath = new File(System.properties['user.home'], '.docker/machine/certs')
//
        registryCredentials {
            url = 'https://index.docker.io/v2'
            username = 'wyyd'
            password = 'r&d@Tianjian'
            email = 'tech@1yd.me'
        }
    }

    task copyJar(type: Copy) {
        dependsOn build

        from project.file("$project.buildDir/libs/" << jarName)
        into project.file("$project.buildDir/docker")
    }

    task createDockerfile(type: Dockerfile) {
        dependsOn copyJar

        // Generate docker-entrypoint.sh
        def bashFile = new File("$project.buildDir/docker/docker-entrypoint.sh")
        bashFile.getParentFile().mkdirs()
        bashFile.createNewFile()
        bashFile.withWriter('UTF-8') {
            writer ->
                writer.print '#!/bin/bash\n' +
                             'set -e\n' +
                             'if [ "$4" = "' + jarName + '" ]; then\n' +
                             '  chown -R athena .\n' +
                             '  exec gosu athena "$@"\n' +
                             'fi\n' +
                             'exec "$@"'
        }

        // Generate Dockerfile
        from 'java'
        maintainer 'Backend Team <backend@1yd.me>'
        runCommand 'groupadd -r athena && useradd -r -g athena athena'

        runCommand 'gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4'
        runCommand 'curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.6/gosu-$(dpkg --print-architecture)" \\\n' +
                '\t&& curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/1.6/gosu-$(dpkg --print-architecture).asc" \\\n' +
                '\t&& gpg --verify /usr/local/bin/gosu.asc \\\n' +
                '\t&& rm /usr/local/bin/gosu.asc \\\n' +
                '\t&& chmod +x /usr/local/bin/gosu'

        runCommand 'mkdir /athena && chown athena:athena /athena'
        workingDir '/athena'
        copyFile jarName.toString(), '/athena/'
        copyFile 'docker-entrypoint.sh', '/entrypoint.sh'
        runCommand 'chmod +x /entrypoint.sh'
        entryPoint '/entrypoint.sh'

        // JAVA_OPTS seems not working, need to further investigate
        // environmentVariable 'JAVA_OPTS', '-Dspring.profiles.active=docker'

        defaultCommand 'java', '-Dspring.profiles.active=docker', '-jar', jarName.toString()
    }

    task buildDockerImage(type: DockerBuildImage) {
        dependsOn createDockerfile

        inputDir = createDockerfile.destFile.parentFile
        tag = 'tianjian/athena-' << jar.baseName
        if (project.hasProperty('imageTag')) {
            tag += ':' << imageTag
        }
    }

    task pushDockerImage(type: DockerPushImage) {
        dependsOn buildDockerImage
        conventionMapping.imageName = { 'tianjian/athena-' + jar.baseName }
        if (project.hasProperty('imageTag')) {
            conventionMapping.tag = { imageTag }
        }
    }

    configure(createDockerfile) {
        group = 'Docker'
        description = 'Create Dockerfile for this project'
    }

    configure(buildDockerImage) {
        group = 'Docker'
        description = 'Build docker image for this project'
    }
}
